{"ast":null,"code":"var _jsxFileName = \"/Users/parkjiwon/Desktop/react-start/begin-react/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useReducer, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport useInputs from './useInputs';\nimport InputSample from './InputSample';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction countActiveUsers(users) {\n  console.log(\"z\");\n  return users.filter(user => user.active).length;\n}\n\n;\nconst initialState = {\n  users: [{\n    id: 1,\n    username: 'test1',\n    email: 'test1@naver.com',\n    active: true\n  }, {\n    id: 2,\n    username: 'test2',\n    email: 'test2@naver.com',\n    active: false\n  }, {\n    id: 3,\n    username: 'test3',\n    email: 'test3@naver.com',\n    active: false\n  }]\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CREATE_USER':\n      return {\n        inputs: initialState.inputs,\n        users: state.users.concat(action.user)\n      };\n\n    case 'TOGGLE_USER':\n      return { ...state,\n        users: state.users.map(user => user.id === action.id ? { ...user,\n          active: !user.active\n        } : user)\n      };\n\n    case 'REMOVE_USER':\n      return { ...state,\n        users: state.users.filter(user => user.id !== action.id)\n      };\n  }\n}\n\nfunction App() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    users\n  } = state;\n  const [form, onChange, reset] = useInputs({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = form;\n  const nextId = useRef(4);\n  const onCreate = useCallback(() => {\n    dispatch({\n      type: 'CREATE_USER',\n      user: {\n        id: nextId.current,\n        username,\n        email\n      }\n    });\n    nextId.current += 1;\n    reset();\n  }, [username, email, reset]);\n  const onToggle = useCallback(id => {\n    dispatch({\n      type: 'TOGGLE_USER',\n      id\n    });\n  }, []);\n  const onRemove = useCallback(id => {\n    dispatch({\n      type: 'REMOVE_USER',\n      id\n    });\n  }, []);\n  const count = useMemo(() => countActiveUsers(users), [users]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(InputSample, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"MEDZsOG1o3xO5zMfKQVixlvnX3U=\", false, function () {\n  return [useInputs];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/parkjiwon/Desktop/react-start/begin-react/src/App.js"],"names":["React","useRef","useState","useReducer","useMemo","useCallback","UserList","CreateUser","useInputs","InputSample","countActiveUsers","users","console","log","filter","user","active","length","initialState","id","username","email","reducer","state","action","type","inputs","concat","map","App","dispatch","form","onChange","reset","nextId","onCreate","current","onToggle","onRemove","count"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAuBC,QAAvB,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,WAAtD,QAAyE,OAAzE;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAgC;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,SAAOF,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,MAA1B,EAAkCC,MAAzC;AACH;;AAAA;AAED,MAAMC,YAAY,GAAG;AAEjBP,EAAAA,KAAK,EACD,CACI;AACIQ,IAAAA,EAAE,EAAG,CADT;AAEIC,IAAAA,QAAQ,EAAE,OAFd;AAGIC,IAAAA,KAAK,EAAE,iBAHX;AAIIL,IAAAA,MAAM,EAAE;AAJZ,GADJ,EAOI;AACIG,IAAAA,EAAE,EAAG,CADT;AAEIC,IAAAA,QAAQ,EAAE,OAFd;AAGIC,IAAAA,KAAK,EAAE,iBAHX;AAIIL,IAAAA,MAAM,EAAE;AAJZ,GAPJ,EAaI;AACIG,IAAAA,EAAE,EAAG,CADT;AAEIC,IAAAA,QAAQ,EAAE,OAFd;AAGIC,IAAAA,KAAK,EAAE,iBAHX;AAIIL,IAAAA,MAAM,EAAG;AAJb,GAbJ;AAHa,CAArB;;AA0BA,SAASM,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAA+B;AAC3B,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,aAAL;AACI,aAAM;AACFC,QAAAA,MAAM,EAAER,YAAY,CAACQ,MADnB;AAEFf,QAAAA,KAAK,EAAEY,KAAK,CAACZ,KAAN,CAAYgB,MAAZ,CAAmBH,MAAM,CAACT,IAA1B;AAFL,OAAN;;AAIJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFZ,QAAAA,KAAK,EAACY,KAAK,CAACZ,KAAN,CAAYiB,GAAZ,CAAgBb,IAAI,IACtBA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAAnB,GACE,EAAC,GAAGJ,IAAJ;AAAUC,UAAAA,MAAM,EAAE,CAACD,IAAI,CAACC;AAAxB,SADF,GACoCD,IAFlC;AAFJ,OAAN;;AAOJ,SAAK,aAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFZ,QAAAA,KAAK,EAAEY,KAAK,CAACZ,KAAN,CAAYG,MAAZ,CAAoBC,IAAI,IAAIA,IAAI,CAACI,EAAL,KAAYK,MAAM,CAACL,EAA/C;AAFL,OAAN;AAhBR;AAqBH;;AAED,SAASU,GAAT,GAAe;AAAA;;AACb,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoB3B,UAAU,CAACmB,OAAD,EAAUJ,YAAV,CAApC;AACA,QAAM;AAACP,IAAAA;AAAD,MAAUY,KAAhB;AACA,QAAM,CAACQ,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,IAA0BzB,SAAS,CAAC;AACtCY,IAAAA,QAAQ,EAAC,EAD6B;AAEtCC,IAAAA,KAAK,EAAC;AAFgC,GAAD,CAAzC;AAIA,QAAM;AAACD,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBU,IAA1B;AACA,QAAMG,MAAM,GAAGjC,MAAM,CAAC,CAAD,CAArB;AAEA,QAAMkC,QAAQ,GAAG9B,WAAW,CAAC,MAAM;AAC/ByB,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAC,aADA;AAELV,MAAAA,IAAI,EAAC;AACDI,QAAAA,EAAE,EAAGe,MAAM,CAACE,OADX;AAEDhB,QAAAA,QAFC;AAGDC,QAAAA;AAHC;AAFA,KAAD,CAAR;AAQAa,IAAAA,MAAM,CAACE,OAAP,IAAkB,CAAlB;AACAH,IAAAA,KAAK;AACR,GAX2B,EAWzB,CAACb,QAAD,EAAUC,KAAV,EAAgBY,KAAhB,CAXyB,CAA5B;AAYA,QAAMI,QAAQ,GAAGhC,WAAW,CAACc,EAAE,IAAG;AAC9BW,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAE,aADD;AAELN,MAAAA;AAFK,KAAD,CAAR;AAID,GALyB,EAKxB,EALwB,CAA5B;AAQA,QAAMmB,QAAQ,GAAGjC,WAAW,CAACc,EAAE,IAAG;AAC9BW,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAC,aADA;AAELN,MAAAA;AAFK,KAAD,CAAR;AAIH,GAL2B,EAK1B,EAL0B,CAA5B;AAMA,QAAOoB,KAAK,GAAGnC,OAAO,CAAC,MAAMM,gBAAgB,CAACC,KAAD,CAAvB,EAA+B,CAACA,KAAD,CAA/B,CAAtB;AAEA,sBACE;AAAA,2BAII,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAQD;;GA9CQkB,G;UAGyBrB,S;;;KAHzBqB,G;AAgDT,eAAeA,GAAf","sourcesContent":["import React, { useRef,useState, useReducer, useMemo, useCallback } from 'react';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\nimport useInputs from './useInputs';\nimport InputSample from './InputSample'\n\nfunction countActiveUsers(users){\n    console.log(\"z\")\n    return users.filter(user => user.active).length;\n};\n\nconst initialState = {\n\n    users :\n        [\n            {\n                id : 1,\n                username: 'test1',\n                email: 'test1@naver.com',\n                active: true\n            },\n            {\n                id : 2,\n                username: 'test2',\n                email: 'test2@naver.com',\n                active: false\n            },\n            {\n                id : 3,\n                username: 'test3',\n                email: 'test3@naver.com',\n                active : false\n            },\n        ]\n    \n}\n\nfunction reducer(state, action){\n    switch(action.type){\n\n        case 'CREATE_USER':\n            return{\n                inputs: initialState.inputs,\n                users: state.users.concat(action.user )\n            }\n        case 'TOGGLE_USER':\n            return{\n                ...state,\n                users:state.users.map(user => \n                    user.id === action.id\n                    ? {...user, active: !user.active} : user\n                    )\n            }\n        case 'REMOVE_USER':\n            return{\n                ...state,\n                users: state.users.filter( user => user.id !== action.id)\n            }\n    }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {users} = state;\n  const [form, onChange, reset] = useInputs({\n      username:'',\n      email:'',\n  })\n  const {username, email} = form;\n  const nextId = useRef(4);\n\n  const onCreate = useCallback(() => {\n      dispatch({\n          type:'CREATE_USER',\n          user:{\n              id : nextId.current,\n              username,\n              email,\n          }\n      });\n      nextId.current += 1;\n      reset();\n  }, [username,email,reset])\n  const onToggle = useCallback(id =>{\n      dispatch({\n          type: 'TOGGLE_USER',\n          id\n      })\n    },[]);\n  \n\n  const onRemove = useCallback(id =>{\n      dispatch({\n          type:'REMOVE_USER',\n          id\n      })\n  },[]);\n  const  count = useMemo(() => countActiveUsers(users),[users])\n\n  return (\n    <>  \n        {/* <CreateUser username={username} email={email} onChange={onChange} onCreate={onCreate}/>\n        <UserList users={users} onToggle={onToggle} onRemove={onRemove}  />\n        <div>활성 사용자 수: {count}</div> */}\n        <InputSample></InputSample>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}